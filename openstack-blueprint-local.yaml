tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.0/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.4.2/plugin.yaml
  - types/local/openstack.yaml

inputs:

  install_agent:
    description: >
      Set to false for a local workflow.
    default: none

  agent_user:
    description: >
      The agent user (ubuntu for ubuntu, root for centos, etc).
    default: ''

  keystone_username:
    type: string

  keystone_password:
    type: string

  region:
    type: string

  keystone_tenant_name:
    type: string

  keystone_url:
    type: string

  nova_url:
    type: string
    default: ''

  neutron_url:
    type: string
    default: ''

  image_id:
    type: string

  flavor_id:
    type: string

  agent_user:
    type: string

  keypair_name:
    type: string

  local_path:
    type: string

  network_name:
    type: string

  subnet_name:
    type: string

  application_port_name:
    type: string

  router_name:
    type: string

  external_network_name:
    type: string

  openstack_subnet_dnsservers:
    default: [8.8.4.4, 8.8.8.8]

  openstack_configuration:
    default:
      username: { get_input: keystone_username }
      password: { get_input: keystone_password }
      tenant_name: { get_input: keystone_tenant_name }
      auth_url: { get_input: keystone_url }
      region: { get_input: region }

node_templates:

  puppet_server:
    type: puppet.types.Server
    relationships:
      - type: cloudify.relationships.contained_in
        target: puppet_server_host

  puppet_agent:
    type: puppet.types.Agent
    relationships:
      - type: cloudify.relationships.contained_in
        target: puppet_agent_host
      - type: puppet.relationships.agent_connected_to_server
        target: puppet_server

  puppet_server_host:
    type: puppet.types.Host
    properties:
      openstack_config: { get_input: openstack_configuration }
      management_network_name: { get_property: [ puppet_network, resource_id ] }
    relationships:
      - type: cloudify.openstack.server_connected_to_keypair
        target: puppet_keypair
      - type: cloudify.openstack.server_connected_to_floating_ip
        target: server_ip
      - type: cloudify.openstack.server_connected_to_port
        target: server_port

  puppet_agent_host:
    type: puppet.types.Host
    properties:
      openstack_config: { get_input: openstack_configuration }
      management_network_name: { get_property: [ puppet_network, resource_id ] }
    relationships:
      - type: cloudify.openstack.server_connected_to_keypair
        target: puppet_keypair
      - type: cloudify.openstack.server_connected_to_floating_ip
        target: agent_ip
      - type: cloudify.openstack.server_connected_to_port
        target: agent_port

  puppet_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: { get_input: openstack_configuration }
      resource_id: { get_input: network_name }

  puppet_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: { get_input: openstack_configuration }
      resource_id: { get_input: subnet_name }
      subnet:
        ip_version: 4
        cidr: 10.67.79.0/24
        dns_nameservers: { get_input: openstack_subnet_dnsservers }
    relationships:
      - target: puppet_network
        type: cloudify.relationships.contained_in
      - target: router
        type: cloudify.openstack.subnet_connected_to_router

  server_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: { get_input: openstack_configuration }
      resource_id: { get_input: application_port_name }
    relationships:
      - type: cloudify.relationships.contained_in
        target: puppet_network
      - type: cloudify.relationships.depends_on
        target: puppet_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: puppet_group

  agent_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: { get_input: openstack_configuration }
      resource_id: { get_input: application_port_name }
    relationships:
      - type: cloudify.relationships.contained_in
        target: puppet_network
      - type: cloudify.relationships.depends_on
        target: puppet_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: puppet_group

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: { get_input: openstack_configuration }
      resource_id: { get_input: router_name }
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: { get_input: openstack_configuration }
      use_external_resource: true
      resource_id: { get_input: external_network_name }

  puppet_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: { get_input: openstack_configuration }
      security_group:
        name: puppet_group
      rules:
        - port: 22
          remote_ip_prefix: 0.0.0.0/0
        - remote_ip_prefix: 0.0.0.0/0
          port: 8140

  puppet_keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      openstack_config: { get_input: openstack_configuration }
      resource_id: { get_input: keypair_name }
      private_key_path: { get_input: local_path }

  server_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: { get_input: openstack_configuration }
      floatingip:
        floating_network_name: { get_input: external_network_name }

  agent_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: { get_input: openstack_configuration }
      floatingip:
        floating_network_name: { get_input: external_network_name }

outputs:

  puppet_endpoint:
    value: { get_attribute: [ server_ip, floating_ip_address ] }
