tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.4.2.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - http://www.getcloudify.org/spec/awssdk-plugin/1.2.0.1/plugin.yaml
  - https://github.com/cloudify-cosmo/cloudify-aws-plugin/releases/download/1.5.1.2/plugin.yaml
  - types/manager/puppet.yaml

inputs:

  ami:
    description: >
      An AWS AMI. Tested with a Ubuntu 14.04 image.
    default: { get_secret: ubuntu_trusty_image }

  instance_type:
    description: >
      The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: t2.micro

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ubuntu


  vpc_id:
    description: >
      The ID of the VPC that the VM should be connected to.
    default: { get_secret: vpc_id }

  public_subnet_id:
    description: >
      The ID of the public subnet in vpc_id.
      This subnet should allow elastic IPs and it should also have either a NAT gateway or NAT instance.
    default: { get_secret: public_subnet_id }

  private_subnet_id:
    description: >
      The ID of the private subnet in vpc_id.
      This subnet should have internet routing to a NAT on another subnet.
    default: { get_secret: private_subnet_id }

  availability_zone:
    description: >
      The availability zone where to create the VM, should be in the same availability zone as public_subnet_id.
    default: { get_secret: availability_zone }

  agent_key_private:
    description: >
      The content of the agent's private key.
    default: { get_secret: agent_key_private }

  agent_key_public:
    description: >
      The content of the agent's public key.
    default: { get_secret: agent_key_public }

dsl_definitions:

    aws_config: &aws_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      ec2_region_name: { get_secret: ec2_region_name }
      ec2_region_endpoint: { get_secret: ec2_region_endpoint }

    client_config: &client_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      region_name: { get_secret: ec2_region_name }

node_templates:

  puppet_server:
    type: puppet.types.Server
    relationships:
      - type: cloudify.relationships.contained_in
        target: puppet_server_host

  puppet_agent:
    type: puppet.types.Agent
    relationships:
      - type: cloudify.relationships.contained_in
        target: puppet_agent_host
      - type: puppet.relationships.agent_connected_to_server
        target: puppet_server

  puppet_server_host:
    type: cloudify.aws.nodes.Instance
    properties:
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
      agent_config:
        install_method: remote
        user: { get_input: agent_user }
        port: 22
        key: { get_input: agent_key_private }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_eni
        target: server_nic
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              block_device_map:
                '/dev/sda1':
                  delete_on_termination: true
              placement: { get_input: availability_zone }
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }

  puppet_agent_host:
    type: cloudify.aws.nodes.Instance
    properties:
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
      agent_config:
        install_method: remote
        user: { get_input: agent_user }
        port: 22
        key: { get_input: agent_key_private }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_eni
        target: agent_nic
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              block_device_map:
                '/dev/sda1':
                  delete_on_termination: true
              placement: { get_input: availability_zone }
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        manage_etc_hosts: True
        users:
          - name: { get_input: agent_user }
            shell: /bin/bash
            sudo: ['ALL=(ALL) NOPASSWD:ALL']
            ssh-authorized-keys:
              - { get_input: agent_key_public }

  agent_ip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      resource_config:
        kwargs:
          Domain: 'vpc'
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: agent_nic

  server_ip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      resource_config:
        kwargs:
          Domain: 'vpc'
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: server_nic

  agent_nic:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Description: Created by puppet-blueprint aws-blueprint.yaml.
          SubnetId: { get_input: public_subnet_id }
    relationships:
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.relationships.depends_on
        target: puppet_group
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            resource_config:
              Description: Created by puppet-blueprint aws-blueprint.yaml.
              SubnetId: { get_input: public_subnet_id }
              Groups:
              - { get_attribute: [ puppet_group, aws_resource_id ] }

  server_nic:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Description: Created by puppet-blueprint aws-blueprint.yaml.
          SubnetId: { get_input: public_subnet_id }
    relationships:
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.relationships.depends_on
        target: puppet_group
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            resource_config:
              Description: Created by puppet-blueprint aws-blueprint.yaml.
              SubnetId: { get_input: public_subnet_id }
              Groups:
              - { get_attribute: [ puppet_group, aws_resource_id ] }

  security_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          IpPermissions:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            IpRanges:
            - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 8140
            ToPort: 8140
            IpRanges:
            - CidrIp: 0.0.0.0/0
    relationships:
    - type: cloudify.relationships.contained_in
      target: puppet_group

  puppet_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      resource_config:
        kwargs:
          GroupName: PuppetExampleSecurityGroup
          Description: Created by puppet-blueprint aws-blueprint.yaml.
          VpcId: { get_input: vpc_id }
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc

  public_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: { get_input: public_subnet_id }
      resource_config:
        kwargs:
          CidrBlock: 'N/A'
          AvailabilityZone: 'N/A'
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: { get_input: vpc_id }
      resource_config:
        kwargs:
          CidrBlock: 'N/A'
