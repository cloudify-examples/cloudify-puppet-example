tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.0.1/plugin.yaml
  - types/manager/puppet.yaml
  - types/manager/openstack.yaml

inputs:

  agent_user:
    description: >
      The agent user (ubuntu for ubuntu, root for centos, etc).
    default: ubuntu

  image:
    description: >
      The Cloud Provider Image ID.
    default: ''

  flavor: 
    description: >
      The Cloud Provider instance_type/size/flavor.
    default: ''

  key_name:
    description: >
      the agent public key name (created during manager bootstrap)
    type: string
    default: puppet-blueprint-key

  private_key_path:
    type: string
    default: ~/.ssh/puppet-blueprint-key.pem

  region:
    default: ''

  external_network_name:
    default: external

  router_name:
    description: The Router Name

  public_network_name:
    description: The name of the Openstack public network.

  public_subnet_name:
    description: The name of the public network subnet.

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_input: region }

node_templates:

  puppet_server:
    type: puppet.types.Server
    relationships:
      - type: cloudify.relationships.contained_in
        target: puppet_server_host

  puppet_agent:
    type: puppet.types.Agent
    relationships:
      - type: cloudify.relationships.contained_in
        target: puppet_agent_host
      - type: puppet.relationships.agent_connected_to_server
        target: puppet_server

  puppet_server_host:
    type: puppet.types.Host
    properties:
      openstack_config: *openstack_config
    relationships:
      - target: key
        type: cloudify.openstack.server_connected_to_keypair
      - target: server_port
        type: cloudify.openstack.server_connected_to_port

  puppet_agent_host:
    type: puppet.types.Host
    properties:
      openstack_config: *openstack_config
    relationships:
      - target: key
        type: cloudify.openstack.server_connected_to_keypair
      - target: agent_port
        type: cloudify.openstack.server_connected_to_port

  puppet_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: puppet_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 8140
        - remote_ip_prefix: 0.0.0.0/0
          port: 22

  server_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: puppet_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: server_ip

  server_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

  agent_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: puppet_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: agent_ip

  agent_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

  public_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_subnet_name }
    relationships:
      - target: public_network
        type: cloudify.relationships.contained_in
      - target: router
        type: cloudify.openstack.subnet_connected_to_router

  public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_network_name }

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: router_name }
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: external_network_name }

  key:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      openstack_config: *openstack_config
      resource_id: { get_input: key_name }
      private_key_path: { get_input: private_key_path }
